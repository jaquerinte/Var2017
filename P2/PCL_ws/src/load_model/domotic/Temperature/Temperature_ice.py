# **********************************************************************
#
# Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.5.1
#
# <auto-generated>
#
# Generated from file `Temperature.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module Temp
_M_Temp = Ice.openModule('Temp')
__name__ = 'Temp'

if 'Temperature' not in _M_Temp.__dict__:
    _M_Temp.Temperature = Ice.createTempClass()
    class Temperature(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Temp.Temperature:
                raise RuntimeError('Temp.Temperature is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Temp::Temperature')

        def ice_id(self, current=None):
            return '::Temp::Temperature'

        def ice_staticId():
            return '::Temp::Temperature'
        ice_staticId = staticmethod(ice_staticId)

        def getTemperature(self, n, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Temp._t_Temperature)

        __repr__ = __str__

    _M_Temp.TemperaturePrx = Ice.createTempClass()
    class TemperaturePrx(Ice.ObjectPrx):

        def getTemperature(self, n, _ctx=None):
            return _M_Temp.Temperature._op_getTemperature.invoke(self, ((n, ), _ctx))

        def begin_getTemperature(self, n, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Temp.Temperature._op_getTemperature.begin(self, ((n, ), _response, _ex, _sent, _ctx))

        def end_getTemperature(self, _r):
            return _M_Temp.Temperature._op_getTemperature.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Temp.TemperaturePrx.ice_checkedCast(proxy, '::Temp::Temperature', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Temp.TemperaturePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_Temp._t_TemperaturePrx = IcePy.defineProxy('::Temp::Temperature', TemperaturePrx)

    _M_Temp._t_Temperature = IcePy.defineClass('::Temp::Temperature', Temperature, -1, (), True, False, None, (), ())
    Temperature._ice_type = _M_Temp._t_Temperature

    Temperature._op_getTemperature = IcePy.Operation('getTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_float, False, 0), ())

    _M_Temp.Temperature = Temperature
    del Temperature

    _M_Temp.TemperaturePrx = TemperaturePrx
    del TemperaturePrx

# End of module Temp
